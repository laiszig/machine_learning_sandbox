{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### **Aluna**: Lais de Souza Ziegler\n",
    "# üõ≥Ô∏è Predi√ß√£o de sobreviv√™ncia em Naufr√°gio\n",
    "Dataset: treino.csv\n",
    "\n",
    "O projeto de predi√ß√£o de sobreviv√™ncia em naufr√°gios utiliza um conjunto de dados inspirado em um incidente recente no Mediterr√¢neo, contendo informa√ß√µes sobre 7.124 passageiros a bordo de um navio. As vari√°veis incluem identifica√ß√£o √∫nica do passageiro, nome, informa√ß√µes da cabine (deck, n√∫mero e posi√ß√£o), proced√™ncia, destino, idade, status de VIP, modalidade de hospedagem e gastos com servi√ßos a bordo. O objetivo √© prever a probabilidade de um passageiro sobreviver ao naufr√°gio com base em suas caracter√≠sticas."
   ],
   "id": "9dfbf8d48afca0a0"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### 1Ô∏è‚É£ Leitura e explora√ß√£o dos dados\n",
    "---\n",
    "#### Importando as bibliotecas necess√°rias para a an√°lise de dados"
   ],
   "id": "2f8a5f0d1f6f58d6"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:45.522749Z",
     "start_time": "2024-11-24T22:37:45.518493Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Pacotes b√°sicos\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Pacotes do Scikit-learn para acesso a datasets, prepara√ß√£o, modelagem e avalia√ß√£o\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, recall_score, f1_score, roc_curve, roc_auc_score, auc \n",
    "\n",
    "# Pacotes para modelos de aprendizado\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import GridSearchCV, cross_val_score\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder"
   ],
   "id": "1a2367acc0a98b84",
   "outputs": [],
   "execution_count": 45
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### Carregando o conjunto de dados a partir de um arquivo CSV \n",
    "- Em seguida, imprimindo os tipos de dados de cada coluna para entender a estrutura do DataFrame\n",
    "- Exibindo as primeiras cinco linhas do conjunto de dados para uma vis√£o geral dos dados"
   ],
   "id": "ea7eae64df9453ea"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:45.590218Z",
     "start_time": "2024-11-24T22:37:45.572458Z"
    }
   },
   "cell_type": "code",
   "source": [
    "df = pd.read_csv(\"treino.csv\")\n",
    "\n",
    "df.info()\n",
    "df.head()"
   ],
   "id": "f04dc20b9ec5e86a",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 16 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   IDpassageiro   1000 non-null   object\n",
      " 1   Nome           1000 non-null   object\n",
      " 2   Deck           1000 non-null   object\n",
      " 3   NumeroCabine   1000 non-null   int64 \n",
      " 4   PosicaoCabine  1000 non-null   object\n",
      " 5   Procedencia    1000 non-null   object\n",
      " 6   Destino        1000 non-null   object\n",
      " 7   Idade          1000 non-null   int64 \n",
      " 8   VIP            1000 non-null   bool  \n",
      " 9   AllInclusive   1000 non-null   bool  \n",
      " 10  ServicoCabine  1000 non-null   int64 \n",
      " 11  Restaurante    1000 non-null   int64 \n",
      " 12  Shopping       1000 non-null   int64 \n",
      " 13  SPA            1000 non-null   int64 \n",
      " 14  ParquedeAguas  1000 non-null   int64 \n",
      " 15  Sobrevivente   1000 non-null   bool  \n",
      "dtypes: bool(3), int64(7), object(6)\n",
      "memory usage: 104.6+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "  IDpassageiro                Nome Deck  NumeroCabine PosicaoCabine  \\\n",
       "0      5647_02   Chabih Matoltuble    D           193             P   \n",
       "1      0107_01         Coobix Hart    A          1202             S   \n",
       "2      4158_01        Doryn Noeley    G           107             P   \n",
       "3      1316_01      Sadrus Quelfly    G           545             S   \n",
       "4      9069_05  Mirfark Taketiatim    D           392             P   \n",
       "\n",
       "  Procedencia    Destino  Idade    VIP  AllInclusive  ServicoCabine  \\\n",
       "0     Finland       Peru     61  False          True            239   \n",
       "1   Argentina  Argentina     31   True         False            466   \n",
       "2        Peru      China     49   True          True           1240   \n",
       "3   Indonesia  Greenland     32  False          True            176   \n",
       "4   Indonesia     Brazil      5  False         False             90   \n",
       "\n",
       "   Restaurante  Shopping   SPA  ParquedeAguas  Sobrevivente  \n",
       "0         1288      3380  1158            587          True  \n",
       "1            6     11299  1598            506          True  \n",
       "2          674     10989   806            463          True  \n",
       "3         1186      8750  1438            379          True  \n",
       "4         1318       161  2853            203          True  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IDpassageiro</th>\n",
       "      <th>Nome</th>\n",
       "      <th>Deck</th>\n",
       "      <th>NumeroCabine</th>\n",
       "      <th>PosicaoCabine</th>\n",
       "      <th>Procedencia</th>\n",
       "      <th>Destino</th>\n",
       "      <th>Idade</th>\n",
       "      <th>VIP</th>\n",
       "      <th>AllInclusive</th>\n",
       "      <th>ServicoCabine</th>\n",
       "      <th>Restaurante</th>\n",
       "      <th>Shopping</th>\n",
       "      <th>SPA</th>\n",
       "      <th>ParquedeAguas</th>\n",
       "      <th>Sobrevivente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5647_02</td>\n",
       "      <td>Chabih Matoltuble</td>\n",
       "      <td>D</td>\n",
       "      <td>193</td>\n",
       "      <td>P</td>\n",
       "      <td>Finland</td>\n",
       "      <td>Peru</td>\n",
       "      <td>61</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>239</td>\n",
       "      <td>1288</td>\n",
       "      <td>3380</td>\n",
       "      <td>1158</td>\n",
       "      <td>587</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0107_01</td>\n",
       "      <td>Coobix Hart</td>\n",
       "      <td>A</td>\n",
       "      <td>1202</td>\n",
       "      <td>S</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>31</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>466</td>\n",
       "      <td>6</td>\n",
       "      <td>11299</td>\n",
       "      <td>1598</td>\n",
       "      <td>506</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4158_01</td>\n",
       "      <td>Doryn Noeley</td>\n",
       "      <td>G</td>\n",
       "      <td>107</td>\n",
       "      <td>P</td>\n",
       "      <td>Peru</td>\n",
       "      <td>China</td>\n",
       "      <td>49</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1240</td>\n",
       "      <td>674</td>\n",
       "      <td>10989</td>\n",
       "      <td>806</td>\n",
       "      <td>463</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1316_01</td>\n",
       "      <td>Sadrus Quelfly</td>\n",
       "      <td>G</td>\n",
       "      <td>545</td>\n",
       "      <td>S</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Greenland</td>\n",
       "      <td>32</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>176</td>\n",
       "      <td>1186</td>\n",
       "      <td>8750</td>\n",
       "      <td>1438</td>\n",
       "      <td>379</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9069_05</td>\n",
       "      <td>Mirfark Taketiatim</td>\n",
       "      <td>D</td>\n",
       "      <td>392</td>\n",
       "      <td>P</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>90</td>\n",
       "      <td>1318</td>\n",
       "      <td>161</td>\n",
       "      <td>2853</td>\n",
       "      <td>203</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 46
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "#### Exibindo a forma do DataFrame, que retorna o n√∫mero de linhas e colunas, ",
   "id": "26e44fa52c2ea7f5"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:45.814871Z",
     "start_time": "2024-11-24T22:37:45.810283Z"
    }
   },
   "cell_type": "code",
   "source": "print(df.shape)",
   "id": "14c7d8839144c6f2",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1000, 16)\n"
     ]
    }
   ],
   "execution_count": 47
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "#### Exibindo um resumo estat√≠stico das colunas num√©ricas do DataFrame",
   "id": "40318f5f7b3b21bd"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:46.186471Z",
     "start_time": "2024-11-24T22:37:46.172551Z"
    }
   },
   "cell_type": "code",
   "source": "df.describe()",
   "id": "22cd05b5c54110f1",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "       NumeroCabine        Idade  ServicoCabine  Restaurante      Shopping  \\\n",
       "count   1000.000000  1000.000000     1000.00000  1000.000000   1000.000000   \n",
       "mean     688.466000    39.816000      883.92700   690.624000   7410.141000   \n",
       "std      404.869011    23.346203      498.44474   419.069741   4413.046425   \n",
       "min        1.000000     0.000000        4.00000     3.000000      2.000000   \n",
       "25%      332.750000    19.000000      473.50000   312.750000   3666.750000   \n",
       "50%      675.000000    40.000000      878.00000   680.000000   7309.000000   \n",
       "75%     1049.500000    61.000000     1297.50000  1045.500000  11279.750000   \n",
       "max     1365.000000    79.000000     1741.00000  1425.000000  15234.000000   \n",
       "\n",
       "               SPA  ParquedeAguas  \n",
       "count  1000.000000    1000.000000  \n",
       "mean   1518.977000     356.879000  \n",
       "std     861.974722     202.812532  \n",
       "min       0.000000       0.000000  \n",
       "25%     797.750000     184.000000  \n",
       "50%    1472.500000     365.500000  \n",
       "75%    2297.500000     532.000000  \n",
       "max    2955.000000     705.000000  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NumeroCabine</th>\n",
       "      <th>Idade</th>\n",
       "      <th>ServicoCabine</th>\n",
       "      <th>Restaurante</th>\n",
       "      <th>Shopping</th>\n",
       "      <th>SPA</th>\n",
       "      <th>ParquedeAguas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.00000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>688.466000</td>\n",
       "      <td>39.816000</td>\n",
       "      <td>883.92700</td>\n",
       "      <td>690.624000</td>\n",
       "      <td>7410.141000</td>\n",
       "      <td>1518.977000</td>\n",
       "      <td>356.879000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>404.869011</td>\n",
       "      <td>23.346203</td>\n",
       "      <td>498.44474</td>\n",
       "      <td>419.069741</td>\n",
       "      <td>4413.046425</td>\n",
       "      <td>861.974722</td>\n",
       "      <td>202.812532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>332.750000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>473.50000</td>\n",
       "      <td>312.750000</td>\n",
       "      <td>3666.750000</td>\n",
       "      <td>797.750000</td>\n",
       "      <td>184.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>675.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>878.00000</td>\n",
       "      <td>680.000000</td>\n",
       "      <td>7309.000000</td>\n",
       "      <td>1472.500000</td>\n",
       "      <td>365.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1049.500000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>1297.50000</td>\n",
       "      <td>1045.500000</td>\n",
       "      <td>11279.750000</td>\n",
       "      <td>2297.500000</td>\n",
       "      <td>532.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1365.000000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>1741.00000</td>\n",
       "      <td>1425.000000</td>\n",
       "      <td>15234.000000</td>\n",
       "      <td>2955.000000</td>\n",
       "      <td>705.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 48
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Verificando se h√° valores ausentes",
   "id": "f8ae65e74279485"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:46.385510Z",
     "start_time": "2024-11-24T22:37:46.379128Z"
    }
   },
   "cell_type": "code",
   "source": "df.isnull().sum()",
   "id": "63bdc2d94aaa5c00",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "IDpassageiro     0\n",
       "Nome             0\n",
       "Deck             0\n",
       "NumeroCabine     0\n",
       "PosicaoCabine    0\n",
       "Procedencia      0\n",
       "Destino          0\n",
       "Idade            0\n",
       "VIP              0\n",
       "AllInclusive     0\n",
       "ServicoCabine    0\n",
       "Restaurante      0\n",
       "Shopping         0\n",
       "SPA              0\n",
       "ParquedeAguas    0\n",
       "Sobrevivente     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 49
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "1. Vis√£o Geral das Colunas e Tipos de Dados:\n",
    "2. Valores Ausentes:\n",
    "3. Duplicatas:\n",
    "4. Resumo Estat√≠stico das Vari√°veis Num√©ricas:\n",
    "5. Distribui√ß√£o das Vari√°veis Categoricas\n",
    "6. Distribui√ß√£o de Idades\n",
    "7. Gr√°ficos de Barras para Vari√°veis Categ√≥ricas:\n",
    "8. Gr√°fico de Sobreviv√™ncia: "
   ],
   "id": "d6a802fd7c679678"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## An√°lise de Passageiros em Fam√≠lia e Solo\n",
    "Identificar se os passageiros se est√£o viajando sozinhos ou em grupo (fam√≠lia) com base em um identificador fornecido.\n",
    "\n",
    "- Separar o ID de Grupo e o N√∫mero do Integrante\n",
    "    - Dividimos o identificador √∫nico de cada passageiro (`IDpassageiro`) em duas partes: o grupo ao qual o passageiro pertence e o n√∫mero de cada integrante dentro desse grupo. Isso nos permite rastrear quantos passageiros fazem parte de cada grupo.\n",
    "\n",
    "- Identificar se o Passageiro est√° em Fam√≠lia\n",
    "    - Com a contagem de passageiros por grupo, marcamos os passageiros que pertencem a grupos com mais de um integrante como \"Em Grupo\", e os demais como \"Solo\".\n"
   ],
   "id": "41ef080fbc92e9ea"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:46.559621Z",
     "start_time": "2024-11-24T22:37:46.549055Z"
    }
   },
   "cell_type": "code",
   "source": [
    "df[['Grupo', 'Integrante']] = df['IDpassageiro'].str.split('_', expand=True)\n",
    "\n",
    "group_counts = df['Grupo'].value_counts()\n",
    "\n",
    "df['EmGrupo'] = df['Grupo'].apply(lambda x: 1 if group_counts[x] > 1 else 0)\n",
    "\n",
    "print(df.EmGrupo.value_counts())"
   ],
   "id": "fc0bcd397968841b",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EmGrupo\n",
      "0    895\n",
      "1    105\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "execution_count": 50
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Visualizar a Distribui√ß√£o de Passageiros em Fam√≠lia e Solo\n",
    "Gr√°fico de barras para mostrar visualmente a quantidade de passageiros que viajam sozinhos em compara√ß√£o aos que viajam em grupo, facilitando a an√°lise da distribui√ß√£o entre esses dois tipos de passageiros."
   ],
   "id": "c33b51c669641d54"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:47.068910Z",
     "start_time": "2024-11-24T22:37:46.994394Z"
    }
   },
   "cell_type": "code",
   "source": [
    "plt.figure(figsize=(6, 4))\n",
    "df['EmGrupo'].value_counts().plot(kind='bar', color=['blue', 'orange'])\n",
    "plt.xticks(ticks=[0, 1], labels=['Solo', 'Em Grupo'], rotation=0)\n",
    "plt.title('Distribui√ß√£o de Passageiros em Grupo e Solo')\n",
    "plt.xlabel('Tipo de Passageiro')\n",
    "plt.ylabel('Contagem')\n",
    "plt.show()"
   ],
   "id": "d42909becce86d8b",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 51
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Visualizar a Distribui√ß√£o de Passageiros por Deck\n",
    "Mostrando visualmente a quantidade de passageiros em cada Deck do navio."
   ],
   "id": "f152e387a471c313"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:47.205765Z",
     "start_time": "2024-11-24T22:37:47.126010Z"
    }
   },
   "cell_type": "code",
   "source": [
    "deck_counts = df['Deck'].value_counts().reset_index()\n",
    "deck_counts_sorted = deck_counts.sort_values(by='Deck', ascending=True)\n",
    "deck_counts.columns = ['Deck', 'Contagem']\n",
    "\n",
    "plt.figure(figsize=(4, 2))\n",
    "sns.heatmap(deck_counts_sorted.set_index('Deck').T, annot=True, fmt='d', cmap='Blues', cbar=False, linewidths=1, linecolor='gray')\n",
    "\n",
    "plt.title('Contagem de Passageiros por Deck', fontsize=16)\n",
    "plt.xlabel('Deck', fontsize=12)\n",
    "plt.show()"
   ],
   "id": "f9e04cd9a7b7df0a",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 400x200 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 52
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Visualizar a Distribui√ß√£o de Passageiros e a Posi√ß√£o da Cabine\n",
    "Mostrando visualmente a quantidade de passageiros em cada Deck do navio."
   ],
   "id": "2cb5563ec5109783"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:47.310099Z",
     "start_time": "2024-11-24T22:37:47.267869Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Gr√°fico 2: Distribui√ß√£o de 'PosicaoCabine' (P vs S)\n",
    "plt.figure(figsize=(8, 6))\n",
    "df['PosicaoCabine'].value_counts().plot(kind='pie', autopct='%1.1f%%', colors=['lightcoral', 'lightgreen'])\n",
    "plt.title('Distribui√ß√£o de PosicaoCabine')\n",
    "plt.ylabel('')  # Remove o r√≥tulo 'y'\n",
    "plt.show()"
   ],
   "id": "c953bfbd2d51b30a",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ],
      "image/png": "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67j22msxd+5cdO/evVmvKUUGBjGdU/v27eH1elFaWor27dvX+bv8/HzY7XbcdNNNsFqtAIC4uDhs3boVQghkZGQEx5NP7y695pprcMkll5z1Z8fHx+OVV16B0+kMfn/77bdjxYoVmDBhQrOOZ/bs2ejTpw9mz54dfPO1Wq2YNWsWSkpKsHPnTlx44YX4xz/+ERwXHzVqFJYvX468vDxMnToV8+bNw65du/Dee+8FA3TMmDHw+Xx48cUXcfXVVyMuLu6Mn/3xxx+joKAAn376KTIyMgAAAwcOxEUXXRS8z6lTp/Diiy/il7/8JR588EEAwOjRoxEXF4cHH3wQv/3tb9GjR48Gj08IUWeC3YkTJ7BixQq89957mDJlChISErBnzx7MnTsXM2bMwE033RQ8xuTkZNxzzz1YsWIFxo0bh/Xr1+P222/HpEmTAADDhg1DXFxc8LVu6NzOmTPnjHNbXFzcYudW13W43W507tz5bC91kMfjQWVlJR588MFgQA8bNgwVFRV48sknUVxcjKSkJAD+noIXXngBAwYMCL4+kyZNwptvvtngpMNTp05h3rx5weEVp9OJ6667DuvWrcPFF1+M119/HaWlpXj33XeRmpoKABg7diymTJmCWbNm4fnnn2/UcVBkYhDTOQWWHgXeWGvLzs7Gs88+i5/97Ge4+OKLMW7cOIwePRrjxo075/P26dPnnPcZN25cMIQBf7e42WzGhg0bmhXELpcL27dvx5133lnneKZMmRJ8g87NzUVubi7cbjf279+PgwcPYseOHdA0DV6vFwCwfv16pKam1mnFAsC0adMwd+5cbNmypd5zsHHjRqSnpwdDGAA6duxY50PK5s2b4XK5kJOTUydQA932q1evPmsQf/LJJ3W6jwHAbDbjoosuCk7IW79+PQBg6tSpde43depU3H///cjLy8O4ceMwfPhwzJ49G9u3b8eYMWMwbty4BsOoLc9t4Hw1tqvearXilVdeAQAUFhZi//79OHDgAL766isA/qAOSEtLC4YwACQlJWHQoEHYsGFDg8+fkJBQZ45DYH5BdXU1AGDt2rXo06cPUlJSgq+pqqoYO3YsFixY0KhjoMjFIKZzKiwshN1ur7eFl5WVhZdffhmvvfYaXn31Vbz88sto3749brnllnMux6kdsA0JtFICVFVFfHx8nTHHpigrK4MQAomJiQ3ex+Vy4a9//Svmz58Pn8+Hzp07IysrC2azOfihpKys7IzaAAR7DBqqr6ysDPHx8WfcnpSUhOLiYgBAaWkpAARbqqc7fvx4wwcIYMKECbj99tsB+D88ORwOpKamwm6316kj8HNrM5vNiI+PD46XP/vss3jppZewePFiLFmyBKqq4sILL8Rf/vKXYMuu9nO21bmNjY1FVFQUCgoKGvxZVVVV8Hq9iI2NBQCsXLkSjz/+OPbt24eoqCj07t07+DtYe5376b0+AJCYmBgcW6/P6d3jgQ8igXHv0tJSHDx4EP369av38dXV1Q12sVPkYxDTWfl8PuTl5WHw4MENjsmOGTMGY8aMQXV1NdatW4c33ngDjz76KAYOHFinZdEcgVAK0DQNJ0+erPNmf3qrKDA5pz7R0dFQFKXOhC/A/0a4YcMGDBw4EE899RSWLFmC5557DhdeeGHwzXrkyJHB+8fGxuLgwYNnPH9RUREA1Bu2gdvre1zt42zXrh0A4KmnnkLXrl3PuG99QVFbXFwc+vfvf9b7BMKpqKioTqB6vV6cPHkyWH9MTAxmzpyJmTNnYt++fVi2bBlefPFF/PnPf8bLL79c5zkbOrdutxvr1q3DwIED8fTTT7fYuR09ejTy8vLgdrths9nOuP8HH3yAv/3tb5g7dy5iYmKCXez/+te/kJaWBkVR8Pbbb2PlypV1Hhf4kHL6zz6fmdIxMTEYNmwY7rnnnnr/vqGufjIGzpqms3r//fdRVFSEX/3qV/X+/d/+9jdcddVVEELA4XBgwoQJwa7LQGslMBbYHKtXr67TPbtkyRL4fD4MHz4cgP/N/9ixY3Uek5+f3+DzRUVFoU+fPsEuyYAVK1bgxhtvRHFxMfLz84NLYAJBsW3bNpSUlARbONnZ2Thy5Ag2b95c53kWLFgAi8XS4AeQESNG4Mcff8TWrVuDt5WUlODbb78Nfj9w4EBYLBYUFhaif//+wS+z2YxnnnmmRTaSGDZsGABg0aJFdW5ftGgRNE3DkCFDcOTIEYwbNw6ff/45AKBbt2648cYbceGFF9bbEj3bub3ppptw/PjxFj23N9xwA0pLS/Hcc8+dUUtRURH++9//IiMjA/369cO2bdvgdrtx0003IT09PdhiDYRw7Rbx/v37cejQoeD3R48exebNm4O/c80xbNgw7N+/HxdccEGd13T+/PmYO3dusyceUmRgi5gAABUVFcEw0HUdJ0+exKpVq/D+++9j2rRpmDx5cr2PGzFiBF599VXcd999mDZtGrxeL/7zn/8gLi4uOKu2Xbt22Lx5M9auXdvkNchFRUW48847MX36dBw4cADPPPMMRo0aFWxBTZgwAcuXL8cTTzyBnJwcbNy48Yzx0dPddddduPXWW3H33XcjNzcXxcXFeOaZZzB58mR0794dAwYMwOLFi/Huu++ie/fu2LlzJ/75z39CUZTgmN+VV16Jd955B7fffjvuuusudO7cGcuXL8dHH32EO+64I9iqPd3ll1+ON954A3fccQf+8Ic/IDo6Gv/85z/rLN2Jj4/H73//e8yaNQsVFRUYPnw4CgsLMWvWLCiK0iIbVGRkZOCKK67A888/j+rqamRnZ2PHjh2YM2cOhg8fjjFjxkBVVXTo0AGPPvooKioqkJ6ejm3btuGbb77BzTff3KRzO2nSJPTs2bNFz+2gQYPwv//7v3juueewd+9e5ObmIj4+Hrt378Yrr7wCt9sdDOl+/frBbDbjH//4B2644QZ4PB7MmzcPX3/9NYC6vSg2mw233nor/vCHP0DTNMyaNQtxcXH4zW9+0+zzff3112P+/Pm4/vrrccMNNyA+Ph6fffYZPvjgA9x///3Nfl6KDAxiAgBs374dv/zlLwH4x7eioqLQs2dPPPLII/j5z3/e4OPGjRuHp556Cv/9739xxx13QFEUDBkyBG+88UZwTPnaa6/Ftm3bcOONN+KJJ55o0mYS11xzDU6dOoXbb78dVqsVl112GWbOnBls0Vx11VU4dOgQPv74Y7z33nvIzs7G888/32ALHvCH90svvYQnn3wSixYtQkpKCi677DLceeedAPzrQr1eL5577jl4PB507twZt956K/bs2YPly5dD0zQ4HA68+eabePrpp4OBGdj85H/+538a/NlWqxWvv/46Hn/8cTz22GNQFAW/+MUvkJaWhhMnTgTv93//939ISkrCO++8g//85z+IjY3FyJEjcffddyMmJqbR5+9sHnvsMXTp0gUfffQR/v3vfyM5ORm//vWvcdttt9XZRe2ZZ54JLvPq2LEj7rjjjgbHrwPnds6cObj99tuRkJDQquf21ltvRd++fYM7bJWVlaFjx44YP348brnlFnTs2BEA0KVLFzz99NOYM2cObr31VsTGxmLQoEF48803MX36dGzcuBG9evUC4N+w5uKLL8YjjzyCU6dOYeTIkfjjH/94Xl3TgbX4Tz/9NB555BG43W507dr1nL8vZAyK4G78ZFDffPMN7rnnHtx111249tprZZdDRAbFMWIypIqKCrRr1w7XXHMN/vKXv+DIkSOySyIig2LXNBnS1q1bcfPNN8PhcOB3v/vdGUtxiIjaCrumiYiIJGLXNBERkUQMYiIiIokYxERERBIxiImIiCRiEBMREUnEICYiIpKIQUxERCQRg5iIiEgiBjEREZFEDGIiIiKJGMREREQSMYiJiIgkYhATERFJxCAmIiKSiEFMREQkEYOYiIhIIgYxERGRRAxiIiIiiRjEREREEjGIiYiIJGIQExERScQgJiIikohBTEREJBGDmIiISCIGMRERkUQMYqIQ4vV6MXv2bEycOBGZmZkYP348nnjiCVRUVMgujYhaiVl2AUT0k6eeegpr1qzBo48+irS0NBw+fBiPPfYYDh48iJdeekl2eUTUChQhhJBdBBH5DRs2DI8//jgmTZoUvG3jxo249tprsXLlSiQnJ0usjohaA7umiUKIoihYt24ddF0P3paVlYVFixYhPj5eYmVE1FrYIiYKIS+88AKef/55dOzYEePGjcOFF16I0aNHIyoqSnZpRNRKGMREIWbBggV45513sGXLFui6jqioKDzwwAO46qqrZJdGRK2AQUwUok6ePIlVq1bhrbfewpYtWzB37lxkZmbKLouIWhjHiIlCxM6dO/Hkk08Gv4+Pj8dll12GN998Ex06dMC6deskVkdErYVBTBQiNE3Dq6++iu3bt9e53Wq1wm63IyEhQVJlRNSauI6YKET069cP48ePx2233YYZM2YgKysLxcXF+Pjjj+HxeDB58mTZJRJRK+AYMVEIqa6uxksvvYTPP/8cBQUFcDqdGD16NGbMmIFOnTrJLo+IWgGDmIiISCKOERMREUnEICYiIpKIQUxERCQRg5iIiEgiBjEREZFEDGIiIiKJGMREREQSMYiJiIgkYhATERFJxCAmIiKSiEFMREQkEYOYiIhIIgYxERGRRLweMZFEQteBwAXQFAWK2vBnY6HrgKYBuu7//8CXogAmk/+xJhOgqmd9nqb+XCJqXQxiolYihAgGZe2gE2439PJy6KdOQVRWQlRX+7+qqvxf1dXQa/6ExwPh9QI+30/B2Rg14QyTCYrJ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3NM/KBBR22IQExERScSPwURERBIxiImIiCRiEBMREUnEICYiIpKIQUxERCQRg5iIiEgiBjEREZFEDGIiIiKJGMREREQSMYiJiIgkYhATERFJZJZdABG1jpycHBw5ciT4vdlsRlpaGq6++mpcf/318gojojoYxEQR7I9//COmTJkCAPD5fFi3bh0eeOABxMXFITc3V25xRASAXdNEES0mJgZJSUlISkpCx44dccUVV2DkyJFYunSp7NKIqAaDmMhgzGYzLBaL7DKIqAaDmMggvF4vli5ditWrV2PixImyyyGiGooQQsgugohaXk5ODoqKimA2+6eCuFwu2O12XHPNNZg5c6bk6ogogJO1iCLYXXfdhcmTJwMAbDYbkpKSYDKZJFdFRLUxiIkiWGJiIrp06SK7DCI6C44RExERScQgJiIikohBTEREJBFnTRMREUnEFjEREZFEDGIiIiKJGMREREQSMYiJiIgkYhATERFJxCAmIiKSiEFMREQkEYOYiIhIIgYxERGRRAxiIiIiiRjEREREEjGIiYiIJGIQExERScQgJiIikohBTEREJBGDmIiISCIGMRERkUQMYiIiIokYxERERBIxiImIiCRiEBMREUnEICYiIpKIQUxERCQRg5iIiEgiBjEREZFEDGIiIiKJGMREREQSMYiJiIgkYhATERFJxCAmIiKSiEFMREQkEYOYiIhIov8PJNJZJvURhQkAAAAASUVORK5CYII="
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 53
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Prepara√ß√£o de Dados\n",
    "\n",
    "- **Codifica√ß√£o de vari√°veis**\n",
    "   - `Deck` foi transformado em c√≥digos num√©ricos.\n",
    "   - `PosicaoCabine` foi mapeada para 1 (P) e 0 (S).\n",
    "   - Colunas booleanas (`VIP`, `AllInclusive`, `Sobrevivente`) foram convertidas para 0 e 1.\n",
    "\n",
    "- **Cria√ß√£o de novas colunas**\n",
    "   - `TotalGasto` foi calculado somando os gastos em diferentes categorias.\n",
    "   - `GrupoHetario` e `RangeGasto` foram criados para agrupar idade e gastos em faixas.\n",
    "\n",
    "- **Convers√£o para c√≥digos num√©ricos**: \n",
    "   - `GrupoHetario` e `RangeGasto` foram convertidos para valores num√©ricos.\n",
    "\n",
    "- **Origem e destino**:\n",
    "   - `MesmaOrigemDestino` foi criada para indicar se a proced√™ncia e destino s√£o iguais.\n",
    "\n",
    "- **Remo√ß√£o de colunas**: \n",
    "   - Colunas de gastos individuais foram removidas.\n"
   ],
   "id": "8c88a95bc89701eb"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:47.393600Z",
     "start_time": "2024-11-24T22:37:47.381041Z"
    }
   },
   "cell_type": "code",
   "source": [
    "df['Deck'] = df['Deck'].astype('category').cat.codes\n",
    "df['PosicaoCabine'] = df['PosicaoCabine'].map({'P': 1, 'S': 0})\n",
    "\n",
    "df['VIP'] = df['VIP'].astype(int)\n",
    "df['AllInclusive'] = df['AllInclusive'].astype(int)\n",
    "df['Sobrevivente'] = df['Sobrevivente'].astype(int)\n",
    "\n",
    "df['TotalGasto'] = df[['ServicoCabine', 'Restaurante', 'Shopping', 'SPA', 'ParquedeAguas']].sum(axis=1)\n",
    "\n",
    "df['GrupoHetario'] = pd.cut(df['Idade'], bins=[-1, 18, 30, 50, 100], labels=[\"0-18\", \"19-30\", \"31-50\", \"51+\"])\n",
    "df['RangeGasto'] = pd.cut(df['TotalGasto'], bins=[-1, 500, 1000, 2000, 5000, 10000, 30000], labels = ['0-500', '501-1000', '1001-2000', '2001-5000', '5001-10000', '10000+'], right=False)\n",
    "\n",
    "df['GrupoHetarioCode'] = df['GrupoHetario'].cat.codes\n",
    "df['RangeGastoCode'] = df['RangeGasto'].cat.codes\n",
    "\n",
    "df['MesmaOrigemDestino'] = (df['Procedencia'] == df['Destino']).astype(int)\n",
    "\n",
    "df.drop(['ServicoCabine', 'Restaurante', 'Shopping', 'SPA', 'ParquedeAguas'], axis=1, inplace=True)"
   ],
   "id": "10b362620571d052",
   "outputs": [],
   "execution_count": 54
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "",
   "id": "5d1748057dcc0b25"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:47.436170Z",
     "start_time": "2024-11-24T22:37:47.432706Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "68c62dffba6bf6a9",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-24T22:37:47.489484Z",
     "start_time": "2024-11-24T22:37:47.478369Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Contagem de passageiros por Deck\n",
    "deck_counts = df['Deck'].value_counts().reset_index()\n",
    "deck_counts.columns = ['Deck', 'Contagem']\n",
    "\n",
    "# Estilizando a tabela no Jupyter Notebook\n",
    "deck_counts.style.set_table_styles(\n",
    "    [{'selector': 'thead th', 'props': [('background-color', 'gray')]}]\n",
    ")\n"
   ],
   "id": "dd75540bd51b51f7",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a0464e5d0>"
      ],
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_ef51b thead th {\n",
       "  background-color: gray;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_ef51b\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_ef51b_level0_col0\" class=\"col_heading level0 col0\" >Deck</th>\n",
       "      <th id=\"T_ef51b_level0_col1\" class=\"col_heading level0 col1\" >Contagem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_ef51b_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_ef51b_row0_col0\" class=\"data row0 col0\" >7</td>\n",
       "      <td id=\"T_ef51b_row0_col1\" class=\"data row0 col1\" >137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ef51b_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_ef51b_row1_col0\" class=\"data row1 col0\" >2</td>\n",
       "      <td id=\"T_ef51b_row1_col1\" class=\"data row1 col1\" >134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ef51b_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_ef51b_row2_col0\" class=\"data row2 col0\" >6</td>\n",
       "      <td id=\"T_ef51b_row2_col1\" class=\"data row2 col1\" >131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ef51b_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_ef51b_row3_col0\" class=\"data row3 col0\" >1</td>\n",
       "      <td id=\"T_ef51b_row3_col1\" class=\"data row3 col1\" >125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ef51b_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_ef51b_row4_col0\" class=\"data row4 col0\" >5</td>\n",
       "      <td id=\"T_ef51b_row4_col1\" class=\"data row4 col1\" >121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ef51b_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_ef51b_row5_col0\" class=\"data row5 col0\" >0</td>\n",
       "      <td id=\"T_ef51b_row5_col1\" class=\"data row5 col1\" >121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ef51b_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_ef51b_row6_col0\" class=\"data row6 col0\" >3</td>\n",
       "      <td id=\"T_ef51b_row6_col1\" class=\"data row6 col1\" >116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_ef51b_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_ef51b_row7_col0\" class=\"data row7 col0\" >4</td>\n",
       "      <td id=\"T_ef51b_row7_col1\" class=\"data row7 col1\" >115</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 55
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
