{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### **Aluna**: Lais de Souza Ziegler\n",
    "# üõ≥Ô∏è Predi√ß√£o de sobreviv√™ncia em Naufr√°gio\n",
    "Dataset: treino.csv\n",
    "\n",
    "O projeto de predi√ß√£o de sobreviv√™ncia em naufr√°gios utiliza um conjunto de dados inspirado em um incidente recente no Mediterr√¢neo, contendo informa√ß√µes sobre 7.124 passageiros a bordo de um navio. As vari√°veis incluem identifica√ß√£o √∫nica do passageiro, nome, informa√ß√µes da cabine (deck, n√∫mero e posi√ß√£o), proced√™ncia, destino, idade, status de VIP, modalidade de hospedagem e gastos com servi√ßos a bordo. O objetivo √© prever a probabilidade de um passageiro sobreviver ao naufr√°gio com base em suas caracter√≠sticas."
   ],
   "id": "79977c6c4a1df117"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### 1Ô∏è‚É£ Leitura e explora√ß√£o dos dados\n",
    "---\n",
    "#### Importando as bibliotecas necess√°rias para a an√°lise de dados"
   ],
   "id": "ba6be45ea5b069e3"
  },
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:45.767969Z",
     "start_time": "2024-11-04T11:31:45.755304Z"
    }
   },
   "source": [
    "# Pacotes b√°sicos\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Pacotes do Scikit-learn para acesso a datasets, prepara√ß√£o, modelagem e avalia√ß√£o\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n",
    "# Pacotes para modelos de aprendizado\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Pacote de balanceamento de classes desbalanceadas\n",
    "# from imblearn.over_sampling import SMOTE\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, recall_score, f1_score, roc_curve, roc_auc_score, auc"
   ],
   "outputs": [],
   "execution_count": 23
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### Carregando o conjunto de dados a partir de um arquivo CSV \n",
    "- Em seguida, imprimindo os tipos de dados de cada coluna para entender a estrutura do DataFrame\n",
    "- Exibindo as primeiras cinco linhas do conjunto de dados para uma vis√£o geral dos dados"
   ],
   "id": "8325511cbaafdcf"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:45.904149Z",
     "start_time": "2024-11-04T11:31:45.873966Z"
    }
   },
   "cell_type": "code",
   "source": [
    "df = pd.read_csv(\"treino.csv\")\n",
    "print(df.dtypes)\n",
    "df.head()"
   ],
   "id": "4cb70ec0936b90ee",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IDpassageiro     object\n",
      "Nome             object\n",
      "Deck             object\n",
      "NumeroCabine      int64\n",
      "PosicaoCabine    object\n",
      "Procedencia      object\n",
      "Destino          object\n",
      "Idade             int64\n",
      "VIP                bool\n",
      "AllInclusive       bool\n",
      "ServicoCabine     int64\n",
      "Restaurante       int64\n",
      "Shopping          int64\n",
      "SPA               int64\n",
      "ParquedeAguas     int64\n",
      "Sobrevivente       bool\n",
      "dtype: object\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "  IDpassageiro                Nome Deck  NumeroCabine PosicaoCabine  \\\n",
       "0      5647_02   Chabih Matoltuble    D           193             P   \n",
       "1      0107_01         Coobix Hart    A          1202             S   \n",
       "2      4158_01        Doryn Noeley    G           107             P   \n",
       "3      1316_01      Sadrus Quelfly    G           545             S   \n",
       "4      9069_05  Mirfark Taketiatim    D           392             P   \n",
       "\n",
       "  Procedencia    Destino  Idade    VIP  AllInclusive  ServicoCabine  \\\n",
       "0     Finland       Peru     61  False          True            239   \n",
       "1   Argentina  Argentina     31   True         False            466   \n",
       "2        Peru      China     49   True          True           1240   \n",
       "3   Indonesia  Greenland     32  False          True            176   \n",
       "4   Indonesia     Brazil      5  False         False             90   \n",
       "\n",
       "   Restaurante  Shopping   SPA  ParquedeAguas  Sobrevivente  \n",
       "0         1288      3380  1158            587          True  \n",
       "1            6     11299  1598            506          True  \n",
       "2          674     10989   806            463          True  \n",
       "3         1186      8750  1438            379          True  \n",
       "4         1318       161  2853            203          True  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IDpassageiro</th>\n",
       "      <th>Nome</th>\n",
       "      <th>Deck</th>\n",
       "      <th>NumeroCabine</th>\n",
       "      <th>PosicaoCabine</th>\n",
       "      <th>Procedencia</th>\n",
       "      <th>Destino</th>\n",
       "      <th>Idade</th>\n",
       "      <th>VIP</th>\n",
       "      <th>AllInclusive</th>\n",
       "      <th>ServicoCabine</th>\n",
       "      <th>Restaurante</th>\n",
       "      <th>Shopping</th>\n",
       "      <th>SPA</th>\n",
       "      <th>ParquedeAguas</th>\n",
       "      <th>Sobrevivente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5647_02</td>\n",
       "      <td>Chabih Matoltuble</td>\n",
       "      <td>D</td>\n",
       "      <td>193</td>\n",
       "      <td>P</td>\n",
       "      <td>Finland</td>\n",
       "      <td>Peru</td>\n",
       "      <td>61</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>239</td>\n",
       "      <td>1288</td>\n",
       "      <td>3380</td>\n",
       "      <td>1158</td>\n",
       "      <td>587</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0107_01</td>\n",
       "      <td>Coobix Hart</td>\n",
       "      <td>A</td>\n",
       "      <td>1202</td>\n",
       "      <td>S</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>31</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>466</td>\n",
       "      <td>6</td>\n",
       "      <td>11299</td>\n",
       "      <td>1598</td>\n",
       "      <td>506</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4158_01</td>\n",
       "      <td>Doryn Noeley</td>\n",
       "      <td>G</td>\n",
       "      <td>107</td>\n",
       "      <td>P</td>\n",
       "      <td>Peru</td>\n",
       "      <td>China</td>\n",
       "      <td>49</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1240</td>\n",
       "      <td>674</td>\n",
       "      <td>10989</td>\n",
       "      <td>806</td>\n",
       "      <td>463</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1316_01</td>\n",
       "      <td>Sadrus Quelfly</td>\n",
       "      <td>G</td>\n",
       "      <td>545</td>\n",
       "      <td>S</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Greenland</td>\n",
       "      <td>32</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>176</td>\n",
       "      <td>1186</td>\n",
       "      <td>8750</td>\n",
       "      <td>1438</td>\n",
       "      <td>379</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9069_05</td>\n",
       "      <td>Mirfark Taketiatim</td>\n",
       "      <td>D</td>\n",
       "      <td>392</td>\n",
       "      <td>P</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>90</td>\n",
       "      <td>1318</td>\n",
       "      <td>161</td>\n",
       "      <td>2853</td>\n",
       "      <td>203</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 24
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "#### Imprimindo a forma do DataFrame, que retorna o n√∫mero de linhas e colunas e verificando se existem valores ausentes, nulos",
   "id": "82ac4e64fa83dc4a"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:46.192133Z",
     "start_time": "2024-11-04T11:31:46.182358Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"Shape: \",df.shape)\n",
    "df.isnull().any()"
   ],
   "id": "bd882bc717c431f4",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape:  (1000, 16)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "IDpassageiro     False\n",
       "Nome             False\n",
       "Deck             False\n",
       "NumeroCabine     False\n",
       "PosicaoCabine    False\n",
       "Procedencia      False\n",
       "Destino          False\n",
       "Idade            False\n",
       "VIP              False\n",
       "AllInclusive     False\n",
       "ServicoCabine    False\n",
       "Restaurante      False\n",
       "Shopping         False\n",
       "SPA              False\n",
       "ParquedeAguas    False\n",
       "Sobrevivente     False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 25
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### R√°pida an√°lise explorat√≥ria dos dados usando o m√©todo describe() para gerar estat√≠sticas descritivas. \n",
    "- Ele fornece um resumo das principais caracter√≠sticas dos dados, ajudando a entender a distribui√ß√£o e caracter√≠sticas gerais das vari√°veis num√©ricas"
   ],
   "id": "b9d88f3a6de68d7b"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:46.492258Z",
     "start_time": "2024-11-04T11:31:46.467424Z"
    }
   },
   "cell_type": "code",
   "source": "df.describe()",
   "id": "d171e51468ff88e2",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "       NumeroCabine        Idade  ServicoCabine  Restaurante      Shopping  \\\n",
       "count   1000.000000  1000.000000     1000.00000  1000.000000   1000.000000   \n",
       "mean     688.466000    39.816000      883.92700   690.624000   7410.141000   \n",
       "std      404.869011    23.346203      498.44474   419.069741   4413.046425   \n",
       "min        1.000000     0.000000        4.00000     3.000000      2.000000   \n",
       "25%      332.750000    19.000000      473.50000   312.750000   3666.750000   \n",
       "50%      675.000000    40.000000      878.00000   680.000000   7309.000000   \n",
       "75%     1049.500000    61.000000     1297.50000  1045.500000  11279.750000   \n",
       "max     1365.000000    79.000000     1741.00000  1425.000000  15234.000000   \n",
       "\n",
       "               SPA  ParquedeAguas  \n",
       "count  1000.000000    1000.000000  \n",
       "mean   1518.977000     356.879000  \n",
       "std     861.974722     202.812532  \n",
       "min       0.000000       0.000000  \n",
       "25%     797.750000     184.000000  \n",
       "50%    1472.500000     365.500000  \n",
       "75%    2297.500000     532.000000  \n",
       "max    2955.000000     705.000000  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NumeroCabine</th>\n",
       "      <th>Idade</th>\n",
       "      <th>ServicoCabine</th>\n",
       "      <th>Restaurante</th>\n",
       "      <th>Shopping</th>\n",
       "      <th>SPA</th>\n",
       "      <th>ParquedeAguas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.00000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>688.466000</td>\n",
       "      <td>39.816000</td>\n",
       "      <td>883.92700</td>\n",
       "      <td>690.624000</td>\n",
       "      <td>7410.141000</td>\n",
       "      <td>1518.977000</td>\n",
       "      <td>356.879000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>404.869011</td>\n",
       "      <td>23.346203</td>\n",
       "      <td>498.44474</td>\n",
       "      <td>419.069741</td>\n",
       "      <td>4413.046425</td>\n",
       "      <td>861.974722</td>\n",
       "      <td>202.812532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.00000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>332.750000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>473.50000</td>\n",
       "      <td>312.750000</td>\n",
       "      <td>3666.750000</td>\n",
       "      <td>797.750000</td>\n",
       "      <td>184.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>675.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>878.00000</td>\n",
       "      <td>680.000000</td>\n",
       "      <td>7309.000000</td>\n",
       "      <td>1472.500000</td>\n",
       "      <td>365.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1049.500000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>1297.50000</td>\n",
       "      <td>1045.500000</td>\n",
       "      <td>11279.750000</td>\n",
       "      <td>2297.500000</td>\n",
       "      <td>532.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1365.000000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>1741.00000</td>\n",
       "      <td>1425.000000</td>\n",
       "      <td>15234.000000</td>\n",
       "      <td>2955.000000</td>\n",
       "      <td>705.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 26
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### 2Ô∏è‚É£ Pr√©-processamento de dados\n",
    "---\n",
    "#### Removendo a coluna 'IDPassageiro' e 'Nome' do DataFrame, pois elas n√£o s√£o relevantes para a an√°lise ou modelagem  \n",
    "- Utilizando o par√¢metro 'axis=1' para indicar que a remo√ß√£o √© feita em colunas."
   ],
   "id": "98c334440d79311f"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:46.863617Z",
     "start_time": "2024-11-04T11:31:46.859615Z"
    }
   },
   "cell_type": "code",
   "source": "df = df.drop(['IDpassageiro', 'Nome'], axis = 1)",
   "id": "20274bd47127d425",
   "outputs": [],
   "execution_count": 27
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "#### Transformando vari√°veis categ√≥ricas em quantitativas ou DUMMIES?!\n",
    "- Criando colunas bin√°rias para cada categoria\n",
    "- Em seguida, convertendo todas as colunas do DataFrame para o tipo inteiro com 'astype(int)'\n",
    "\n",
    "Esta t√©cnica √© conhecida como \"One-hot Encoding\". Ela √© utilizada para transformar vari√°veis categ√≥ricas (que n√£o possuem uma ordem num√©rica natural) em uma representa√ß√£o num√©rica que pode ser entendida por algoritmos de aprendizado de m√°quina. Isso √© feito criando colunas bin√°rias (0 ou 1) para cada poss√≠vel valor da categoria.\n"
   ],
   "id": "988c8a9d7604c9b3"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:47.075772Z",
     "start_time": "2024-11-04T11:31:47.066423Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Codifica√ß√£o de Deck usando Label Encoding\n",
    "df['Deck'] = df['Deck'].astype('category').cat.codes\n",
    "\n",
    "# Codifica√ß√£o de PosicaoCabine (P = 1, S = 0)\n",
    "df['PosicaoCabine'] = df['PosicaoCabine'].map({'P': 1, 'S': 0})\n",
    "df.head(10)"
   ],
   "id": "4919a8531892c3ce",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "   Deck  NumeroCabine  PosicaoCabine Procedencia        Destino  Idade    VIP  \\\n",
       "0     3           193              1     Finland           Peru     61  False   \n",
       "1     0          1202              0   Argentina      Argentina     31   True   \n",
       "2     6           107              1        Peru          China     49   True   \n",
       "3     6           545              0   Indonesia      Greenland     32  False   \n",
       "4     3           392              1   Indonesia         Brazil      5  False   \n",
       "5     1           852              1       China         Russia     72  False   \n",
       "6     2          1150              0      Brazil      Indonesia     69   True   \n",
       "7     7           358              0       China       Portugal      5   True   \n",
       "8     4           710              0       China         Brazil     47   True   \n",
       "9     2           877              0   Indonesia  United States      6  False   \n",
       "\n",
       "   AllInclusive  ServicoCabine  Restaurante  Shopping   SPA  ParquedeAguas  \\\n",
       "0          True            239         1288      3380  1158            587   \n",
       "1         False            466            6     11299  1598            506   \n",
       "2          True           1240          674     10989   806            463   \n",
       "3          True            176         1186      8750  1438            379   \n",
       "4         False             90         1318       161  2853            203   \n",
       "5          True           1548          979      5356  1648            480   \n",
       "6          True            603          792     13718  2869            364   \n",
       "7         False             84          873      3754  1110            357   \n",
       "8          True            420          634      8517   423            487   \n",
       "9         False           1360           16     13964   525            282   \n",
       "\n",
       "   Sobrevivente  \n",
       "0          True  \n",
       "1          True  \n",
       "2          True  \n",
       "3          True  \n",
       "4          True  \n",
       "5          True  \n",
       "6         False  \n",
       "7          True  \n",
       "8          True  \n",
       "9         False  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Deck</th>\n",
       "      <th>NumeroCabine</th>\n",
       "      <th>PosicaoCabine</th>\n",
       "      <th>Procedencia</th>\n",
       "      <th>Destino</th>\n",
       "      <th>Idade</th>\n",
       "      <th>VIP</th>\n",
       "      <th>AllInclusive</th>\n",
       "      <th>ServicoCabine</th>\n",
       "      <th>Restaurante</th>\n",
       "      <th>Shopping</th>\n",
       "      <th>SPA</th>\n",
       "      <th>ParquedeAguas</th>\n",
       "      <th>Sobrevivente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>Finland</td>\n",
       "      <td>Peru</td>\n",
       "      <td>61</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>239</td>\n",
       "      <td>1288</td>\n",
       "      <td>3380</td>\n",
       "      <td>1158</td>\n",
       "      <td>587</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1202</td>\n",
       "      <td>0</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>31</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>466</td>\n",
       "      <td>6</td>\n",
       "      <td>11299</td>\n",
       "      <td>1598</td>\n",
       "      <td>506</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>107</td>\n",
       "      <td>1</td>\n",
       "      <td>Peru</td>\n",
       "      <td>China</td>\n",
       "      <td>49</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1240</td>\n",
       "      <td>674</td>\n",
       "      <td>10989</td>\n",
       "      <td>806</td>\n",
       "      <td>463</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>545</td>\n",
       "      <td>0</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Greenland</td>\n",
       "      <td>32</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>176</td>\n",
       "      <td>1186</td>\n",
       "      <td>8750</td>\n",
       "      <td>1438</td>\n",
       "      <td>379</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>392</td>\n",
       "      <td>1</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>90</td>\n",
       "      <td>1318</td>\n",
       "      <td>161</td>\n",
       "      <td>2853</td>\n",
       "      <td>203</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>852</td>\n",
       "      <td>1</td>\n",
       "      <td>China</td>\n",
       "      <td>Russia</td>\n",
       "      <td>72</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1548</td>\n",
       "      <td>979</td>\n",
       "      <td>5356</td>\n",
       "      <td>1648</td>\n",
       "      <td>480</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>1150</td>\n",
       "      <td>0</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>69</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>603</td>\n",
       "      <td>792</td>\n",
       "      <td>13718</td>\n",
       "      <td>2869</td>\n",
       "      <td>364</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>358</td>\n",
       "      <td>0</td>\n",
       "      <td>China</td>\n",
       "      <td>Portugal</td>\n",
       "      <td>5</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>84</td>\n",
       "      <td>873</td>\n",
       "      <td>3754</td>\n",
       "      <td>1110</td>\n",
       "      <td>357</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4</td>\n",
       "      <td>710</td>\n",
       "      <td>0</td>\n",
       "      <td>China</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>47</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>420</td>\n",
       "      <td>634</td>\n",
       "      <td>8517</td>\n",
       "      <td>423</td>\n",
       "      <td>487</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2</td>\n",
       "      <td>877</td>\n",
       "      <td>0</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>United States</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1360</td>\n",
       "      <td>16</td>\n",
       "      <td>13964</td>\n",
       "      <td>525</td>\n",
       "      <td>282</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 28
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:47.267632Z",
     "start_time": "2024-11-04T11:31:47.256538Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Selecionar apenas colunas num√©ricas\n",
    "numerical_df = df.select_dtypes(include=['number'])\n",
    "\n",
    "# Calcular Q1 e Q3 e o IQR apenas nas colunas num√©ricas\n",
    "Q1 = numerical_df.quantile(0.25)\n",
    "Q3 = numerical_df.quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# Filtrar o DataFrame original, removendo os outliers\n",
    "df = df[~((numerical_df < (Q1 - 1.5 * IQR)) | (numerical_df > (Q3 + 1.5 * IQR))).any(axis=1)]\n"
   ],
   "id": "e62311e32590e574",
   "outputs": [],
   "execution_count": 29
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:47.634973Z",
     "start_time": "2024-11-04T11:31:47.513141Z"
    }
   },
   "cell_type": "code",
   "source": [
    "sns.histplot(df['Idade'], kde=True)\n",
    "sns.countplot(data=df, x='Sobrevivente')"
   ],
   "id": "347d397e7f7e612c",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Idade', ylabel='Count'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 30
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:47.905947Z",
     "start_time": "2024-11-04T11:31:47.896913Z"
    }
   },
   "cell_type": "code",
   "source": "print(df)",
   "id": "3a4f614ed44a84a0",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Deck  NumeroCabine  PosicaoCabine             Procedencia        Destino  \\\n",
      "0       3           193              1                 Finland           Peru   \n",
      "1       0          1202              0               Argentina      Argentina   \n",
      "2       6           107              1                    Peru          China   \n",
      "3       6           545              0               Indonesia      Greenland   \n",
      "4       3           392              1               Indonesia         Brazil   \n",
      "..    ...           ...            ...                     ...            ...   \n",
      "995     6          1310              0  Bosnia and Herzegovina         Brazil   \n",
      "996     6          1165              1           United States    Philippines   \n",
      "997     4           520              1                  Brazil        Ukraine   \n",
      "998     2           167              1                  Poland  United States   \n",
      "999     6           961              1                   China       Portugal   \n",
      "\n",
      "     Idade    VIP  AllInclusive  ServicoCabine  Restaurante  Shopping   SPA  \\\n",
      "0       61  False          True            239         1288      3380  1158   \n",
      "1       31   True         False            466            6     11299  1598   \n",
      "2       49   True          True           1240          674     10989   806   \n",
      "3       32  False          True            176         1186      8750  1438   \n",
      "4        5  False         False             90         1318       161  2853   \n",
      "..     ...    ...           ...            ...          ...       ...   ...   \n",
      "995     61   True          True           1569          106      8090  2915   \n",
      "996     48  False          True           1455           70      8001  2858   \n",
      "997     41  False         False            471          841     11890   100   \n",
      "998     75  False          True           1072         1133     13953  1355   \n",
      "999     38   True          True           1055          294      4584  2046   \n",
      "\n",
      "     ParquedeAguas  Sobrevivente  \n",
      "0              587          True  \n",
      "1              506          True  \n",
      "2              463          True  \n",
      "3              379          True  \n",
      "4              203          True  \n",
      "..             ...           ...  \n",
      "995            680          True  \n",
      "996            361          True  \n",
      "997            437          True  \n",
      "998            384         False  \n",
      "999            618          True  \n",
      "\n",
      "[1000 rows x 14 columns]\n"
     ]
    }
   ],
   "execution_count": 31
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:32:49.353880Z",
     "start_time": "2024-11-04T11:32:49.338603Z"
    }
   },
   "cell_type": "code",
   "source": [
    "cols = [\"Sobrevivente\", \"Idade\", \"NumeroCabine\", \"Deck\", \"PosicaoCabine\"]\n",
    "train_corr = df[cols].corr()\n",
    "train_corr"
   ],
   "id": "34b178336878076",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "               Sobrevivente     Idade  NumeroCabine      Deck  PosicaoCabine\n",
       "Sobrevivente       1.000000  0.028084      0.011796 -0.007704      -0.015130\n",
       "Idade              0.028084  1.000000      0.004141 -0.030655       0.027304\n",
       "NumeroCabine       0.011796  0.004141      1.000000  0.015362      -0.023164\n",
       "Deck              -0.007704 -0.030655      0.015362  1.000000      -0.007834\n",
       "PosicaoCabine     -0.015130  0.027304     -0.023164 -0.007834       1.000000"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sobrevivente</th>\n",
       "      <th>Idade</th>\n",
       "      <th>NumeroCabine</th>\n",
       "      <th>Deck</th>\n",
       "      <th>PosicaoCabine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sobrevivente</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.028084</td>\n",
       "      <td>0.011796</td>\n",
       "      <td>-0.007704</td>\n",
       "      <td>-0.015130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Idade</th>\n",
       "      <td>0.028084</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.004141</td>\n",
       "      <td>-0.030655</td>\n",
       "      <td>0.027304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NumeroCabine</th>\n",
       "      <td>0.011796</td>\n",
       "      <td>0.004141</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.015362</td>\n",
       "      <td>-0.023164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Deck</th>\n",
       "      <td>-0.007704</td>\n",
       "      <td>-0.030655</td>\n",
       "      <td>0.015362</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.007834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PosicaoCabine</th>\n",
       "      <td>-0.015130</td>\n",
       "      <td>0.027304</td>\n",
       "      <td>-0.023164</td>\n",
       "      <td>-0.007834</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 43
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:32:52.081658Z",
     "start_time": "2024-11-04T11:32:51.863211Z"
    }
   },
   "cell_type": "code",
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(train_corr, annot=True, cmap='coolwarm')\n",
    "plt.title('Matriz de Correla√ß√£o')\n",
    "plt.show()"
   ],
   "id": "caeae927b1e1e57e",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 44
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:48.792711Z",
     "start_time": "2024-11-04T11:31:48.779308Z"
    }
   },
   "cell_type": "code",
   "source": [
    "le = LabelEncoder()\n",
    "df['Procedencia'] = le.fit_transform(df['Procedencia'])\n",
    "df['Destino'] = le.fit_transform(df['Destino'])\n",
    "df"
   ],
   "id": "1455e2ce8ee2ed5a",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "     Deck  NumeroCabine  PosicaoCabine  Procedencia  Destino  Idade    VIP  \\\n",
       "0       3           193              1           35       93     61  False   \n",
       "1       0          1202              0            4        4     31   True   \n",
       "2       6           107              1           87       22     49   True   \n",
       "3       6           545              0           46       43     32  False   \n",
       "4       3           392              1           46       13      5  False   \n",
       "..    ...           ...            ...          ...      ...    ...    ...   \n",
       "995     6          1310              0           13       13     61   True   \n",
       "996     6          1165              1          116       94     48  False   \n",
       "997     4           520              1           15      122     41  False   \n",
       "998     2           167              1           89      124     75  False   \n",
       "999     6           961              1           22       96     38   True   \n",
       "\n",
       "     AllInclusive  ServicoCabine  Restaurante  Shopping   SPA  ParquedeAguas  \\\n",
       "0            True            239         1288      3380  1158            587   \n",
       "1           False            466            6     11299  1598            506   \n",
       "2            True           1240          674     10989   806            463   \n",
       "3            True            176         1186      8750  1438            379   \n",
       "4           False             90         1318       161  2853            203   \n",
       "..            ...            ...          ...       ...   ...            ...   \n",
       "995          True           1569          106      8090  2915            680   \n",
       "996          True           1455           70      8001  2858            361   \n",
       "997         False            471          841     11890   100            437   \n",
       "998          True           1072         1133     13953  1355            384   \n",
       "999          True           1055          294      4584  2046            618   \n",
       "\n",
       "     Sobrevivente  \n",
       "0            True  \n",
       "1            True  \n",
       "2            True  \n",
       "3            True  \n",
       "4            True  \n",
       "..            ...  \n",
       "995          True  \n",
       "996          True  \n",
       "997          True  \n",
       "998         False  \n",
       "999          True  \n",
       "\n",
       "[1000 rows x 14 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Deck</th>\n",
       "      <th>NumeroCabine</th>\n",
       "      <th>PosicaoCabine</th>\n",
       "      <th>Procedencia</th>\n",
       "      <th>Destino</th>\n",
       "      <th>Idade</th>\n",
       "      <th>VIP</th>\n",
       "      <th>AllInclusive</th>\n",
       "      <th>ServicoCabine</th>\n",
       "      <th>Restaurante</th>\n",
       "      <th>Shopping</th>\n",
       "      <th>SPA</th>\n",
       "      <th>ParquedeAguas</th>\n",
       "      <th>Sobrevivente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>93</td>\n",
       "      <td>61</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>239</td>\n",
       "      <td>1288</td>\n",
       "      <td>3380</td>\n",
       "      <td>1158</td>\n",
       "      <td>587</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1202</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>31</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>466</td>\n",
       "      <td>6</td>\n",
       "      <td>11299</td>\n",
       "      <td>1598</td>\n",
       "      <td>506</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>107</td>\n",
       "      <td>1</td>\n",
       "      <td>87</td>\n",
       "      <td>22</td>\n",
       "      <td>49</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1240</td>\n",
       "      <td>674</td>\n",
       "      <td>10989</td>\n",
       "      <td>806</td>\n",
       "      <td>463</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>545</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>43</td>\n",
       "      <td>32</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>176</td>\n",
       "      <td>1186</td>\n",
       "      <td>8750</td>\n",
       "      <td>1438</td>\n",
       "      <td>379</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>392</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>90</td>\n",
       "      <td>1318</td>\n",
       "      <td>161</td>\n",
       "      <td>2853</td>\n",
       "      <td>203</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>6</td>\n",
       "      <td>1310</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>61</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1569</td>\n",
       "      <td>106</td>\n",
       "      <td>8090</td>\n",
       "      <td>2915</td>\n",
       "      <td>680</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>6</td>\n",
       "      <td>1165</td>\n",
       "      <td>1</td>\n",
       "      <td>116</td>\n",
       "      <td>94</td>\n",
       "      <td>48</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1455</td>\n",
       "      <td>70</td>\n",
       "      <td>8001</td>\n",
       "      <td>2858</td>\n",
       "      <td>361</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>4</td>\n",
       "      <td>520</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>122</td>\n",
       "      <td>41</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>471</td>\n",
       "      <td>841</td>\n",
       "      <td>11890</td>\n",
       "      <td>100</td>\n",
       "      <td>437</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>2</td>\n",
       "      <td>167</td>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>124</td>\n",
       "      <td>75</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1072</td>\n",
       "      <td>1133</td>\n",
       "      <td>13953</td>\n",
       "      <td>1355</td>\n",
       "      <td>384</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>6</td>\n",
       "      <td>961</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>96</td>\n",
       "      <td>38</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1055</td>\n",
       "      <td>294</td>\n",
       "      <td>4584</td>\n",
       "      <td>2046</td>\n",
       "      <td>618</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows √ó 14 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 34
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:48.904519Z",
     "start_time": "2024-11-04T11:31:48.896651Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Dividir os dados em conjuntos de treinamento e teste\n",
    "X = df.drop('Sobrevivente', axis=1)\n",
    "y = df['Sobrevivente']\n",
    "# X, y = SMOTE().fit_resample(X, y)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ],
   "id": "c5901d1aa0d97108",
   "outputs": [],
   "execution_count": 35
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:49.183703Z",
     "start_time": "2024-11-04T11:31:49.013147Z"
    }
   },
   "cell_type": "code",
   "source": [
    "model = RandomForestClassifier(random_state=42)\n",
    "model.fit(X_train, y_train)"
   ],
   "id": "d9114e61afdeaf4a",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ],
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"‚ñ∏\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"‚ñæ\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 36
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:49.341311Z",
     "start_time": "2024-11-04T11:31:49.322520Z"
    }
   },
   "cell_type": "code",
   "source": "y_pred = model.predict(X_test)",
   "id": "c44318f00ec7423",
   "outputs": [],
   "execution_count": 37
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:49.407344Z",
     "start_time": "2024-11-04T11:31:49.398021Z"
    }
   },
   "cell_type": "code",
   "source": [
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "recall = recall_score(y_test, y_pred)\n",
    "f1 = f1_score(y_test, y_pred)"
   ],
   "id": "eaac7f162f443741",
   "outputs": [],
   "execution_count": 38
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:49.587860Z",
     "start_time": "2024-11-04T11:31:49.473050Z"
    }
   },
   "cell_type": "code",
   "source": [
    "y_prob = model.predict_proba(X_test)[:, 1]\n",
    "fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
    "auc_score = roc_auc_score(y_test, y_prob)\n",
    "plt.plot(fpr, tpr, label=f\"AUC = {auc_score:.2f}\")\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Curva ROC')\n",
    "plt.legend()\n",
    "plt.show()"
   ],
   "id": "442ce3c9f43d4330",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 39
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:49.603836Z",
     "start_time": "2024-11-04T11:31:49.598847Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"Accuracy: {:.2f}%\".format(accuracy * 100))\n",
    "print(\"Recall: {:.2f}%\".format(recall * 100))\n",
    "print(\"F1 Score: {:.2f}%\".format(f1 * 100))\n"
   ],
   "id": "dbc3b895b1e7bb7b",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 49.67%\n",
      "Recall: 61.94%\n",
      "F1 Score: 55.98%\n"
     ]
    }
   ],
   "execution_count": 40
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:49.705702Z",
     "start_time": "2024-11-04T11:31:49.662066Z"
    }
   },
   "cell_type": "code",
   "source": [
    "dt_model = DecisionTreeClassifier(random_state=42)\n",
    "dt_model.fit(X_train, y_train)\n",
    "\n",
    "# Fazer previs√µes\n",
    "y_pred_dt = dt_model.predict(X_test)\n",
    "\n",
    "accuracy_dt = accuracy_score(y_test, y_pred_dt)\n",
    "recall_dt = recall_score(y_test, y_pred_dt)\n",
    "f1_dt = f1_score(y_test, y_pred_dt)\n",
    "roc_auc_dt = roc_auc_score(y_test, dt_model.predict_proba(X_test)[:, 1])\n",
    "\n",
    "print(f'Decision Tree - Acur√°cia: {accuracy_dt:.2f}, Recall: {recall_dt:.2f}, F1: {f1_dt:.2f}, ROC AUC: {roc_auc_dt:.2f}')\n",
    "\n",
    "# Plotar curva ROC\n",
    "# fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
    "roc_curve(dt_model, X_test, y_test)\n",
    "plt.title('Curva ROC - Decision Tree')\n",
    "plt.show()\n",
    "\n",
    "# Previs√µes de probabilidade\n",
    "y_pred_proba_dt = dt_model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Calcular a curva ROC\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba_dt)\n",
    "roc_auc_dt = auc(fpr, tpr)\n"
   ],
   "id": "d4e29f9a6bd5c110",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree - Acur√°cia: 0.55, Recall: 0.64, F1: 0.60, ROC AUC: 0.55\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "too many positional arguments",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mTypeError\u001B[0m                                 Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[41], line 16\u001B[0m\n\u001B[0;32m     12\u001B[0m \u001B[38;5;28mprint\u001B[39m(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mDecision Tree - Acur√°cia: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00maccuracy_dt\u001B[38;5;132;01m:\u001B[39;00m\u001B[38;5;124m.2f\u001B[39m\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m, Recall: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mrecall_dt\u001B[38;5;132;01m:\u001B[39;00m\u001B[38;5;124m.2f\u001B[39m\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m, F1: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mf1_dt\u001B[38;5;132;01m:\u001B[39;00m\u001B[38;5;124m.2f\u001B[39m\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m, ROC AUC: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mroc_auc_dt\u001B[38;5;132;01m:\u001B[39;00m\u001B[38;5;124m.2f\u001B[39m\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m'\u001B[39m)\n\u001B[0;32m     14\u001B[0m \u001B[38;5;66;03m# Plotar curva ROC\u001B[39;00m\n\u001B[0;32m     15\u001B[0m \u001B[38;5;66;03m# fpr, tpr, _ = roc_curve(y_test, y_prob)\u001B[39;00m\n\u001B[1;32m---> 16\u001B[0m \u001B[43mroc_curve\u001B[49m\u001B[43m(\u001B[49m\u001B[43mdt_model\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mX_test\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my_test\u001B[49m\u001B[43m)\u001B[49m\n\u001B[0;32m     17\u001B[0m plt\u001B[38;5;241m.\u001B[39mtitle(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mCurva ROC - Decision Tree\u001B[39m\u001B[38;5;124m'\u001B[39m)\n\u001B[0;32m     18\u001B[0m plt\u001B[38;5;241m.\u001B[39mshow()\n",
      "File \u001B[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\utils\\_param_validation.py:191\u001B[0m, in \u001B[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\u001B[1;34m(*args, **kwargs)\u001B[0m\n\u001B[0;32m    188\u001B[0m func_sig \u001B[38;5;241m=\u001B[39m signature(func)\n\u001B[0;32m    190\u001B[0m \u001B[38;5;66;03m# Map *args/**kwargs to the function signature\u001B[39;00m\n\u001B[1;32m--> 191\u001B[0m params \u001B[38;5;241m=\u001B[39m \u001B[43mfunc_sig\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mbind\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[0;32m    192\u001B[0m params\u001B[38;5;241m.\u001B[39mapply_defaults()\n\u001B[0;32m    194\u001B[0m \u001B[38;5;66;03m# ignore self/cls and positional/keyword markers\u001B[39;00m\n",
      "File \u001B[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:3242\u001B[0m, in \u001B[0;36mSignature.bind\u001B[1;34m(self, *args, **kwargs)\u001B[0m\n\u001B[0;32m   3237\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mbind\u001B[39m(\u001B[38;5;28mself\u001B[39m, \u001B[38;5;241m/\u001B[39m, \u001B[38;5;241m*\u001B[39margs, \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mkwargs):\n\u001B[0;32m   3238\u001B[0m \u001B[38;5;250m    \u001B[39m\u001B[38;5;124;03m\"\"\"Get a BoundArguments object, that maps the passed `args`\u001B[39;00m\n\u001B[0;32m   3239\u001B[0m \u001B[38;5;124;03m    and `kwargs` to the function's signature.  Raises `TypeError`\u001B[39;00m\n\u001B[0;32m   3240\u001B[0m \u001B[38;5;124;03m    if the passed arguments can not be bound.\u001B[39;00m\n\u001B[0;32m   3241\u001B[0m \u001B[38;5;124;03m    \"\"\"\u001B[39;00m\n\u001B[1;32m-> 3242\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_bind\u001B[49m\u001B[43m(\u001B[49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
      "File \u001B[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:3168\u001B[0m, in \u001B[0;36mSignature._bind\u001B[1;34m(self, args, kwargs, partial)\u001B[0m\n\u001B[0;32m   3164\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m   3165\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m param\u001B[38;5;241m.\u001B[39mkind \u001B[38;5;129;01min\u001B[39;00m (_VAR_KEYWORD, _KEYWORD_ONLY):\n\u001B[0;32m   3166\u001B[0m         \u001B[38;5;66;03m# Looks like we have no parameter for this positional\u001B[39;00m\n\u001B[0;32m   3167\u001B[0m         \u001B[38;5;66;03m# argument\u001B[39;00m\n\u001B[1;32m-> 3168\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mTypeError\u001B[39;00m(\n\u001B[0;32m   3169\u001B[0m             \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mtoo many positional arguments\u001B[39m\u001B[38;5;124m'\u001B[39m) \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m\n\u001B[0;32m   3171\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m param\u001B[38;5;241m.\u001B[39mkind \u001B[38;5;241m==\u001B[39m _VAR_POSITIONAL:\n\u001B[0;32m   3172\u001B[0m         \u001B[38;5;66;03m# We have an '*args'-like argument, let's fill it with\u001B[39;00m\n\u001B[0;32m   3173\u001B[0m         \u001B[38;5;66;03m# all positional arguments we have left and move on to\u001B[39;00m\n\u001B[0;32m   3174\u001B[0m         \u001B[38;5;66;03m# the next phase\u001B[39;00m\n\u001B[0;32m   3175\u001B[0m         values \u001B[38;5;241m=\u001B[39m [arg_val]\n",
      "\u001B[1;31mTypeError\u001B[0m: too many positional arguments"
     ]
    }
   ],
   "execution_count": 41
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-11-04T11:31:49.776184100Z",
     "start_time": "2024-11-03T20:20:02.266232Z"
    }
   },
   "cell_type": "code",
   "source": [
    "knn_model = KNeighborsClassifier(n_neighbors=5)  # Voc√™ pode ajustar o n√∫mero de vizinhos\n",
    "knn_model.fit(X_train, y_train)\n",
    "\n",
    "# Fazer previs√µes\n",
    "y_pred_knn = knn_model.predict(X_test)\n",
    "\n",
    "accuracy_knn = accuracy_score(y_test, y_pred_knn)\n",
    "recall_knn = recall_score(y_test, y_pred_knn)\n",
    "f1_knn = f1_score(y_test, y_pred_knn)\n",
    "roc_auc_knn = roc_auc_score(y_test, knn_model.predict_proba(X_test)[:, 1])\n",
    "\n",
    "print(f'KNN - Acur√°cia: {accuracy_knn:.2f}, Recall: {recall_knn:.2f}, F1: {f1_knn:.2f}, ROC AUC: {roc_auc_knn:.2f}')\n",
    "\n",
    "# Plotar curva ROC\n",
    "# roc_curve(knn_model, X_test, y_test)\n",
    "plt.title('Curva ROC - KNN')\n",
    "plt.show()\n"
   ],
   "id": "578a16e0aed182e5",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN - Acur√°cia: 0.57, Recall: 0.65, F1: 0.61, ROC AUC: 0.55\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 520
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
